# -*- coding: utf-8 -*-import arcpy, datetime, osarcpy.env.overwriteOutput=TruecurrentDate = datetime.date.today()dirParcelFiles=r"N:\PARCEL FILES"#N:\PARCEL FILES\140740811000\CRITICAL AREA REPORTSdirDesktop=r"\\chcnty1\MarcS\desktop"class Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [C1Wetland]class DELETEME(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "CAAR- Critical Area & Archaeology Review"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        pp=arcpy.Parameter(            displayName="Identify Folder zzz",            name="ServerFolder",            datatype="DEFolder",            parameterType="Required",            direction="Input"        )        #0        p0=arcpy.Parameter(            displayName="Enter TPN's to search for:",            name="ListTPN",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True        )        #p0.values=[362833002000,272141003000,350621001000,461313008000]        #1 parcels        p1=arcpy.Parameter(            displayName="Parcel source to search in:",            name="StringParcelSource",            datatype="GPString",            parameterType="Required",            direction="Input"        )        p1.value=r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\Parcels_2022_07_22"        #2a shoreline des        p2=arcpy.Parameter(            displayName="Land Use- Shoreline (SMP Designation(s))",            name="carrLUsmp",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True        )        p2.category="1. Shoreline, Land Use, Subarea/Overlay, Plat"        p2.values=[r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\caarShoreline_SMPDes200fBuffer"]        #2b1 lu des        p3=arcpy.Parameter(            displayName="Land Use- Comp Plan: Designation",            name="carrLUcompplan",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True        )        p3.category="1. Shoreline, Land Use, Subarea/Overlay, Plat"        p3.values=[r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\LandUse"]        #2b2        p4=arcpy.Parameter(            displayName="Land Use- Comp Plan: Density",            name="carrLUcompdensity",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True        )        p4.category="1. Shoreline, Land Use, Subarea/Overlay, Plat"        p4.values=[r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\LandUseDensity"]        #2c subarea/overlay        p5=arcpy.Parameter(            displayName="Land Use- Comp Plan: Subarea/Overlay",            name="carrLUcompoverlay",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True        )        p5.category="1. Shoreline, Land Use, Subarea/Overlay, Plat"        p5.values=[r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\ZoningDistrict",r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\Subarea"]        #2d plat        p6=arcpy.Parameter(            displayName="UPDATE--Land Use- Plat polygons Layer",            name="carrLUplat",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True        )        p6.category="1. Shoreline, Land Use, Subarea/Overlay, Plat"        p6.values=[r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\Plat_Boundaries"]        #3 wetlands        p7=arcpy.Parameter(            displayName="Wetland Layer(s)",            name="carrWetlands",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True        )        p7.category="2. Wetlands"        p7.values=[r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\NWI_Wetlands_2018_B300",r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\Possible_Non_Tidal_Wet_B300",r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\Possible_Tidal_Wetlands_B300"]        #4 geology        p8=arcpy.Parameter(            displayName="UPDATE--Geological Hazards",            name="carrLUgeohaz",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True        )        p8.category="3. Geological Hazards"        p8.values=[r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\unsbluf", r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\SlopeO15_356142", r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\Soils_With_Subclass_e", r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\Nonbedrock_Shoreline", r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\WADOEczAtlas"]        #5 fema flodzone        p9=arcpy.Parameter(            displayName="Flood Hazard Layer(s)",            name="carrFloodHazard",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True        )        p9.category="4. Special Flood Hazard"        p9.values=[r"O:\Workspace\MarcS_gis\LandUse_SandBox\LandUse_SandBox.gdb\caarFloodZone2017"]        #6 fwhca        p10=arcpy.Parameter(            displayName="UPDATE--FWHCA",            name="carrLUfwhca",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True        )        p10.category="5. FWHCA Data"        p10.values=['O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Peregrine_Falcon', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Peregrine_Falcon_Buff', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Golden_Eagle_Buff', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Great_Blue_Heron_Buff', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Black_Oystercatcher', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Bald_Eagle_Buff', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Salmon_Or_Trout', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Eelgrass', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Smelt', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Coho_Salmon_Run', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Sand_Lance', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Dune_Grass', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\PHS_Haulout', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Red_Sea_Urchin', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Pacific_Herring_Spawning_Areas', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Pacific_Herring_Holding_Areas', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Oyster_Beds', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Oaks_and_Grasslands', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Northern_Abalone', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Washington_Natural_Heritage_Program_VAR', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\DFW_Priority_Habitats_VAR', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Bull_Kelp', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Wildlife_Species_Survey_VAR', 'O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\caarFWHCA\\Seabird_Colonies_VAR','O:\\Workspace\\MarcS_gis\\LandUse_SandBox\\LandUse_SandBox.gdb\\DNR_Streams']        #7 archaeology        p11=arcpy.Parameter(            displayName="Archaeology Layer(s); requires Archaeology2021 feature layer to be open in current map",            name="caarArchaeology",            datatype="GPFeatureLayer",            parameterType="Required",            direction="Input",            multiValue=True        )        p11.category="6. Archaeology"        p11.values=["6. Archaeology\\Archaeological_Polys"]        p12=arcpy.Parameter(            displayName="Enable Printing?",            name="caarPrint",            datatype="GPBoolean",            parameterType="Required",            direction="Input"        )        p12.value=True        params = [p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12]        #p12- print? default yes        #p13- record table        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        tpn=[i for i in parameters[0].values]        dResults={}        where_clause =""        for i in tpn:            if len(where_clause)==0:                where_clause="PIN = '{}'".format(i)            else:                newClause = " OR PIN = '{}'".format(i)                where_clause=where_clause+newClause        parcels=parameters[1].valueAsText        luShoreLayers=parameters[2].values        luCompLayers=parameters[3].values        luDensityLayers=parameters[4].values        luOverlayLayers=parameters[5].values        luPlatLayers=parameters[6].values        wetlandLayers=parameters[7].values        geoHazLayers=parameters[8].values        #lGeo=["Nonbedrock_Shoreline","SlopeO15","SlopeO50","Soils_With_Subclass_e","unsbluf","WADOEczAtlas"]        floodLayers=parameters[9].values        fwhcaLayers=parameters[10].values        archaeologyLayers=parameters[11].values        bPrint=parameters[12].value        l_kSection=["Parcel Overview","Shoreline Designation","Land Use","Subarea/Overlay Area","Plat Information","Wetlands","Geological Hazards","Special Flood Hazard Area","FWHCA Area","Archaeology"]        lTFlayouts=["CAAR_PossibleWetlands","CAAR_PossibleGeoHazards","CAAR_SFHA"]        ##lTFlayouts=["CAAR_PossibleWetlands","CAAR_PossibleGeoHazards","CAAR_SFHA"]        date=tStamp        with arcpy.da.SearchCursor(parcels,['PIN','SHAPE@','Acres','SitusAddr','Short_Lega'],where_clause) as sc1:            for row in sc1:                dResults[row[0]]={}                dResults[row[0]]["geom"]=row[1]                dResults[row[0]]["acres"]=round(row[2],2)                dResults[row[0]]["addr"]=row[3]                dResults[row[0]]["shortLegal"]=row[4]        for PIN in dResults.keys():            PINpoly=dResults[PIN]["geom"]            ##1 TPN Base Results            kSection="Parcel Overview"            addr=""            for i in "a":                if len(dResults[PIN]["addr"])<1:                    addr=""                else:                    addr=" ({})".format(dResults[PIN]["addr"])            dResults[PIN][kSection]="TPN-{0}{1}; Acres={2}; \nShort Legal Description={3}".format(PIN,addr,str(dResults[PIN]["acres"]),dResults[PIN]["shortLegal"])            ##2a LANDUSE-SHORE            kSection="Shoreline Designation"            tCheck=False            for i in luShoreLayers:                with arcpy.da.SearchCursor(i,['SHAPE@','Designatio']) as scLUshore:                    for row in scLUshore:                        TESTpoly = row[0]                        desig=row[1]                        if TESTpoly.disjoint(PINpoly)==False:                            if kSection in dResults[PIN].keys():                                dResults[PIN][kSection]="{}, {}".format(dResults[PIN][kSection],desig)                            else:                                dResults[PIN][kSection]=desig                            tCheck=True                            dResults[PIN][lTFlayouts[2]]=True                        else:                            continue            for i in "r":                if tCheck==False:                    dResults[PIN][kSection]="N/A"                    dResults[PIN][lTFlayouts[2]]=False                else:                    continue            ##2b1 LANDUSE-CompPlan            kSection="Land Use"            tCheck=False            for i in luCompLayers:                with arcpy.da.SearchCursor(i,['SHAPE@','Landuse']) as scLUcomp:                    for row in scLUcomp:                        TESTpoly = row[0]                        desig=row[1]                        if PINpoly.trueCentroid.within(TESTpoly)==True:                            dResults[PIN][kSection]=desig                            tCheck=True                            break                        else:                            continue            for i in "r":                if tCheck==False:                    dResults[PIN][kSection]="ERROR- no Comp Plan designation found".format(PIN)                else:                    continue            ##2b2 LANDUSE-Density            kSection="Land Use"#adds density            tCheck=False            for i in luDensityLayers:                with arcpy.da.SearchCursor(i,['SHAPE@','Density']) as scLUdens:                    for row in scLUdens:                        TESTpoly = row[0]                        desig=row[1]                        if PINpoly.trueCentroid.within(TESTpoly)==True:                            if dResults[PIN]["acres"]<5:                                dResults[PIN][kSection]=dResults[PIN][kSection]+"-{}".format(desig)                            else:                                dResults[PIN][kSection]=dResults[PIN][kSection]+"-{}; Should doublecheck large parcels for multiple densities".format(desig)                            tCheck=True                            break                        else:                            continue            for i in "r":                if tCheck==False:                    dResults[PIN][kSection]="ERROR- no Comp Plan density designation found"                else:                    continue            ##2c1 LANDUSE-OVERLAY####            kSection="Subarea/Overlay Area"            tCheck=False            for i in luOverlayLayers:                desc=['SHAPE@']                lFields=[f.name for f in arcpy.ListFields(i)]                for f in "t":                    if 'ZONECLASS' in lFields:                        desc.append('ZONECLASS')                    else:                        desc.append('Subarea')                with arcpy.da.SearchCursor(i,desc) as scLUoverlay:                    for row in scLUoverlay:                        TESTpoly = row[0]                        desig=row[1]                        if PINpoly.trueCentroid.within(TESTpoly)==True:                            if kSection in dResults[PIN].keys():                                dResults[PIN][kSection]="{}, {}".format(dResults[PIN][kSection],desig)                            else:                                dResults[PIN][kSection]=desig                            tCheck=True                        else:                            continue            for i in "r":                if tCheck==False:                    dResults[PIN][kSection]="N/A"                else:                    continue            ##2d plat             kSection="Plat Information"#luPlatLayers            tCheck=False            for i in luPlatLayers:                with arcpy.da.SearchCursor(i,['SHAPE@','Name']) as scLUplat:                    for row in scLUplat:                        TESTpoly = row[0]                        if PINpoly.trueCentroid.within(TESTpoly)==True:                            dResults[PIN][kSection]=row[1]                            tCheck=True                            break                        else:                            continue            for i in "r":                if tCheck==False:                    dResults[PIN][kSection]="N/A".format(PIN)                else:                    continue            ##3 WETLANDS TEST            kSection="Wetlands"            tCheck=False            for i in wetlandLayers:                if tCheck==False:                    with arcpy.da.SearchCursor(i,['SHAPE@']) as scW:                        for row in scW:                            TESTpoly = row[0]                            if TESTpoly.disjoint(PINpoly)==False:                                dResults[PIN][kSection]="Possible wetlands within 300' of TPN"                                tCheck=True                                break                            else:                                continue                else:                    continue            for i in "r":                if tCheck==False:                    dResults[PIN][kSection]="None in GIS Data"                else:                    continue            dResults[PIN][lTFlayouts[0]]=tCheck            ##4 Geological Hazards#geoHazLayers            kSection="Geological Hazards"            tCheck=False            for i in geoHazLayers:                with arcpy.da.SearchCursor(i,['SHAPE@']) as scGeoHaz:                    for row in scGeoHaz:                            TESTpoly = row[0]                            if TESTpoly.disjoint(PINpoly)==False:                                dResults[PIN][kSection]="Possible Geological Hazard"                                tCheck=True                                break                            else:                                continue            for i in "r":                if tCheck==False:                    dResults[PIN][kSection]="None in GIS Data"                else:                    continue            dResults[PIN][lTFlayouts[1]]=tCheck            ##5 FLOODZONE TEST            kSection="Special Flood Hazard Area"#e.g.#Special Flood Hazard Area 1966 DFIRM 53055C BFE 16            tCheck=False            for i in floodLayers:                if tCheck==False:                    with arcpy.da.SearchCursor(i,['SHAPE@','SFHA_TF','DFIRM_ID','STATIC_BFE','FLD_AR_ID','FLD_ZONE'],"FLD_ZONE = 'A' OR FLD_ZONE = 'AE' OR FLD_ZONE = 'VE'") as scA:                        for row in scA:                            TESTpoly = row[0]                            if TESTpoly.disjoint(PINpoly)==False:                                dResults[PIN][kSection]="Special Flood Hazard Area= {0} | DFIRM: {1} | BFE= {2}\nSFHA Elevation Certificate= {3} (if available) | Zone= {4}".format(row[4],row[2],row[3],"",row[5])                                tCheck=True                                break                            else:                                continue                else:                    continue            for i in "r":                if tCheck==False:                    dResults[PIN][kSection]="N/A"                else:                    continue            #5 fwhcaLayers##needs work            kSection="FWHCA Area"            tCheck=False            for i in "s":                if dResults[PIN][lTFlayouts[2]]==True:                    dResults[PIN][kSection]="FWHCA along shoreline"                    tCheck=True                else:                    continue            for i in fwhcaLayers:                iName=i.split("\\")[-1].replace("_"," ").replace("VAR","")                if tCheck==False:                    with arcpy.da.SearchCursor(i,['SHAPE@']) as scF:                        for row in scF:                            TESTpoly = row[0]                            if TESTpoly.disjoint(PINpoly)==False:                                dResults[PIN][kSection]="FWHCA Considerations: {}".format(iName)                                tCheck=True                                break                            else:                                continue                else:                    with arcpy.da.SearchCursor(i,['SHAPE@']) as scF:                        for row in scF:                            TESTpoly = row[0]                            if TESTpoly.disjoint(PINpoly)==False:                                dResults[PIN][kSection]="{}, {}".format(dResults[PIN][kSection],iName)                                tCheck=True                                break                            else:                                continue                del iName            for i in "r":                if tCheck==False:                    dResults[PIN][kSection]="None in GIS Data"                else:                    continue            #6 ARCHAEOLOGY TEST            kSection="Archaeology"            tCheck=False            for i in archaeologyLayers:                if tCheck==False:                    with arcpy.da.SearchCursor(i,['SHAPE@','Category']) as scA:                        for row in scA:                            TESTpoly = row[0]                            if TESTpoly.disjoint(PINpoly)==False:                                dResults[PIN][kSection]="TPN overlaps with Archaeology buffer: {}".format(row[1])                                tCheck=True                                break                            else:                                continue                else:                    continue            for i in "r":                if tCheck==False:                    dResults[PIN][kSection]="N/A"                else:                    continue        for PIN in tpn:            arcpy.AddMessage("CAAR Script Tool results for TPN- {}".format(PIN))            desig=""            for item in l_kSection:                arcpy.AddMessage("{}: {}".format(item,dResults[PIN][item]))                desig=desig+"\n{}: {}".format(item,dResults[PIN][item])            arcpy.AddMessage("\n---\n")            dResults[PIN]["body"]=desig        ##layouts        aprx=arcpy.mp.ArcGISProject(r"O:\Workspace\MarcS_gis\LandUse_CAARapps\LandUse_CAARapps.aprx")        aprxTEMPdir=r"O:\Workspace\MarcS_gis\LandUse_CAARapps\LandUse_CAARappsTEMP.aprx"        lyts=aprx.listLayouts()        dirCritAreaRep=""        for PIN in tpn:            dirCritAreaRep=dirDesktop            #dirCritAreaRep=os.path.join(dirParcelFiles,PIN,"CRITICAL AREA REPORTS")            tCheck=False#assumes folder path does not exist            for attempt in ["UseExistingFolder","AddFolder","GiveUpNSave2Desktop"]:                if attempt=="UseExistingFolder" and tCheck==False:                    try:                        dirCritAreaRep=os.path.join(dirParcelFiles,PIN,"CRITICAL AREA REPORTS")                        if os.path.exists(dirCritAreaRep):                            tCheck=True##confirms folder path exists                    except:                        dirCritAreaRep=dirDesktop                        arcpy.AddMessage("Could not find folder 'CRITICAL AREA REPORTS' for TPN {} so one is being created".format(PIN))                        continue                elif attempt=="AddFolder" and tCheck==False:                    try:                        dirPIN=os.path.join(dirParcelFiles,PIN)                        arcpy.management.CreateFolder(dirPIN, "CRITICAL AREA REPORTS")                        dirCritAreaRep=os.path.join(dirParcelFiles,PIN,"CRITICAL AREA REPORTS")                        if os.path.exists(dirCritAreaRep):                            tCheck=True##confirms folder path exists                        break                    except:                        dirCritAreaRep=dirDesktop                        continue                elif attempt=="GiveUpNSave2Desktop" and tCheck==False:                    arcpy.management.CreateFolder(dirDesktop, PIN)                    dirPIN=os.path.join(dirDesktop,PIN)                    arcpy.management.CreateFolder(dirPIN, "CRITICAL AREA REPORTS")                    dirCritAreaRep=os.path.join(dirDesktop,PIN,"CRITICAL AREA REPORTS")                    arcpy.AddMessage("Could not find or create the specified folder, writing to following path instead: '{}'".format(dirCritAreaRep))                    continue                else:                    continue            PINpoly=dResults[PIN]["geom"]            PINbuffer100=PINpoly.buffer(100)            PINbuffer300=PINpoly.buffer(300)            ##can't figure out layouts usafe in adobe proble- using reference: https://pro.arcgis.com/en/pro-app/latest/arcpy/mapping/layout-class.htm            if bPrint==True:                for lyt in lyts:                    if lyt.name=="CAAR_Overview":                        #arcpy.SelectLayerByAttribute_management ("Parcels", "NEW_SELECTION", "Parcels_2022_07_22.PIN = '{}'".format(PIN)) ## Not working as currently coded for output layouts, works with Python window and project open                        eMap = lyt.listElements("MAPFRAME_ELEMENT","Map Frame")[0]                        eMap.camera.setExtent(PINbuffer100.extent)                        eTitle = lyt.listElements("TEXT_ELEMENT", "Title")[0]                        eTitle.text="CAAR Results for TPN: {}".format(PIN)                        eBody = lyt.listElements("TEXT_ELEMENT", "Body")[0]                        eBody.text=dResults[PIN]["body"]                        pdfName="{}_CAAR_Overview_TPN-{}".format(date,PIN)                        lyt.exportToPDF("{}/{}".format(dirCritAreaRep,pdfName), resolution = 150,pdf_accessibility=True)                    elif lyt.name=="CAAR_PossibleWetlands" and dResults[PIN][lTFlayouts[0]]==True:                        eMap = lyt.listElements("MAPFRAME_ELEMENT","Map Frame")[0]                        eMap.camera.setExtent(PINbuffer300.extent)                        eTitle = lyt.listElements("TEXT_ELEMENT", "Title")[0]                        eTitle.text="Possible Wetlands near TPN: {}".format(PIN)                        pdfName="{}_CAAR_PossibleWetlands_TPN-{}".format(date,PIN)                        lyt.exportToPDF("{}/{}".format(dirCritAreaRep,pdfName), resolution = 150,image_compression="JPEG",output_as_image=True,pdf_accessibility=True)                    elif lyt.name=="CAAR_PossibleGeoHazards":                        eMap = lyt.listElements("MAPFRAME_ELEMENT","Map Frame")[0]                        eMap.camera.setExtent(PINbuffer100.extent)                        eTitle = lyt.listElements("TEXT_ELEMENT", "Title")[0]                        eTitle.text="Possible Geological Hazards near TPN: {}".format(PIN)                        pdfName="{}_CAAR_PossibleGeoHazards_TPN-{}".format(date,PIN)                        lyt.exportToPDF("{}/{}".format(dirCritAreaRep,pdfName), resolution = 150,image_compression="JPEG",output_as_image=True,pdf_accessibility=True)                    elif lyt.name=="CAAR_SFHA" and dResults[PIN][lTFlayouts[2]]==True:                        eMap = lyt.listElements("MAPFRAME_ELEMENT","Map Frame")[0]                        eMap.camera.setExtent(PINbuffer100.extent)                        eTitle = lyt.listElements("TEXT_ELEMENT", "Title")[0]                        eTitle.text="Special Flood Hazard Area near TPN: {}".format(PIN)                        pdfName="{}_CAAR_SFHA_TPN-{}".format(date,PIN)                        lyt.exportToPDF("{}/{}".format(dirCritAreaRep,pdfName), resolution = 150,image_compression="JPEG",output_as_image=True,pdf_accessibility=True)                    else:                        continue            else:                continue                del desc, tpn, parcels, row, PIN, PINpoly, wetlandLayers, archaeologyLayers, floodLayers, TESTpoly, luShoreLayers, tCheck, desig, i, luCompLayers, luOverlayLayers, luDensityLayers, kSection, l_kSection, item        del PINbuffer100, PINbuffer300, lyt, lyts, aprx, eMap, eTitle, eBody        returnclass C1Wetland(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Critical Area Review: Wetland"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        #0 input parcel_results fcs        p0=arcpy.Parameter(            displayName="Input Parcel Results Featureclass",            name="InputTPN",            datatype="GPString",            parameterType="Required",            direction="Input"        )        p0.value=r"O:\Workspace\MarcS_gis\CAARPubResultsTEST.gdb\Parcel_Results"        #1 wetlands dataset ["SHAPE@"]        p1=arcpy.Parameter(            displayName="Wetland Dataset",            name="WetlandDataset",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=False        )        p1.value=r"O:\Workspace\MarcS_gis\CAARpublic.gdb\Wetlands"        params = [p0,p1]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        DIRinput=parameters[0].valueAsText        #parcels=parameters[1].valueAsText        FCSwetlandLayers=[]        for root,b,layers in arcpy.da.Walk(parameters[1].valueAsText,"FeatureClass","Polygon"):            for i in layers:                temp=os.path.join(root,i)                FCSwetlandLayers.append(temp)        arcpy.AddMessage(FCSwetlandLayers)        #wetlandLayers=parameters[7].values        ##lTFlayouts=["CAAR_PossibleWetlands","CAAR_PossibleGeoHazards","CAAR_SFHA"]        tStamp="{}-{}-{}".format(currentDate.year,currentDate.month,currentDate.day)        ct=0        with arcpy.da.UpdateCursor(DIRinput,['PIN','SHAPE@','pWetland','AdnlCaarNotes']) as uc:            for row in uc:                ct+=1                pinPOLY=row[1]                rWetland=""                for t in "o":                    try :                        if len(row[2])>0:                            rWetland=row[2]                        else:                            continue                    except:                        continue                rNotes=""                for t in "o":                    try :                        if len(row[3])>0:                            rNotes=row[2]                        else:                            continue                    except:                        continue                arcpy.AddMessage(row[0])                ####Corrections 2 make: use date of layer in "Reviewed..." portion of output & handle breaks to allow capture of both tidal and non-tidal wetland data                for lyr in FCSwetlandLayers:                    iName=lyr.split("\\")[-1][0:-9].replace("_"," ")                    with arcpy.da.SearchCursor(lyr,['SHAPE@']) as scW:                        for rowsc in scW:                            TESTpoly = rowsc[0].buffer(300)                            if TESTpoly.disjoint(pinPOLY)==False & len(rWetland)<2:                                rWetland=iName                                break                            elif TESTpoly.disjoint(pinPOLY)==False & len(rWetland)>=2:                                rWetland="{}, {}".format(row[2],iName)                                break                            else:                                continue                row[2]=rWetland+"|Reviewed {}".format(tStamp)                if len(rNotes)<25:                    rNotes="|Last updated {}".format(tStamp)                else:                    rNotes=rNotes[:-24]+"|Last updated {}".format(tStamp)                row[3]=rNotes                    #Last updated 2022-11-16                uc.updateRow(row)        del i,tStamp,ct,row,uc,pinPOLY,rWetland        return