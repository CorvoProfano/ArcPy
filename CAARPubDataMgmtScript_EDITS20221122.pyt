# -*- coding: utf-8 -*-import arcpy, datetime, osarcpy.env.overwriteOutput=TruecurrentDate = datetime.date.today()dirParcelFiles=r"PATHWAY_TO_TARGET_OBJECT"#PATHWAY_TO_TARGET_OBJECTdirDesktop=r"\\chcnty1\MarcS\desktop"class Toolbox(object):    def __init__(self):        """Define the toolbox (the name of the toolbox is the name of the        .pyt file)."""        self.label = "Toolbox"        self.alias = "toolbox"        # List of tool classes associated with this toolbox        self.tools = [C1Wetland,C2GeoHaz,C3SFHA,C4FWHCA,C5Archy]class C1Wetland(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Critical Area Review: Wetland"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        #0 input parcel_results fcs        p0=arcpy.Parameter(            displayName="Input Parcel Results Featureclass",            name="InputTPN",            datatype="GPString",            parameterType="Required",            direction="Input"        )        p0.value=r"PATHWAY_TO_TARGET_OBJECT.gdb\Parcel_Results"        p1=arcpy.Parameter(            displayName="Wetland Dataset",            name="WetlandDataset",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=False        )        p1.value=r"PATHWAY_TO_TARGET_OBJECT.gdb\Wetlands"        p2 = arcpy.Parameter(            displayName="Default Buffer in Feet",            name="dBuff",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=False        )        p2.value = "300"        params = [p0,p1,p2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        DIRinput=parameters[0].valueAsText        FCSwetlandLayers=[]        for root,b,layers in arcpy.da.Walk(parameters[1].valueAsText,"FeatureClass","Polygon"):            for i in layers:                temp=os.path.join(root,i)                FCSwetlandLayers.append(temp)        arcpy.AddMessage(FCSwetlandLayers)        tStamp="{}-{}-{}".format(currentDate.year,currentDate.month,currentDate.day)        ct=0        buf=int(parameters[2].valueAsText)        with arcpy.da.UpdateCursor(DIRinput,['PIN','SHAPE@','pWetland','AdnlCaarNotes']) as uc:            for row in uc:                ct+=1                pinPOLY=row[1]                rNotes=""                for t in "o":                    try:                        if len(row[3])>0:                            rNotes=row[2]                        else:                            continue                    except:                        continue                #arcpy.AddMessage(ct)                dTrack={}                iResults = []                for i,lyr in enumerate(FCSwetlandLayers):                    iName=lyr.split("\\")[-1][0:-9].replace("_"," ")##eg 'Possible tidal wetland' cannot handle VAR's in suffix                    dTrack[i]=0                    with arcpy.da.SearchCursor(lyr,['SHAPE@']) as scW:                        for rowsc in scW:                            TESTpoly = rowsc[0].buffer(buf)                            if dTrack[i]==0:                                if TESTpoly.disjoint(pinPOLY)==False:                                    iResults.append(iName)                                    dTrack[i]+=1                                else:                                    continue                            else:                                continue                row[2]=", ".join(iResults)                rNotes=rNotes[:-24]+"|Last updated {}".format(tStamp)                row[3]=rNotes #eg 'Last updated 2022-11-16'                uc.updateRow(row)        del i,tStamp,ct,row,uc,pinPOLY,dTrack,iResults,FCSwetlandLayers, rNotes, TESTpoly,rowsc,scW, buf, temp        returnclass C2GeoHaz(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Critical Area Review: Geological Hazards"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        #0 input parcel_results fcs        p0=arcpy.Parameter(            displayName="Input Parcel Results Featureclass",            name="InputTPN",            datatype="GPString",            parameterType="Required",            direction="Input"        )        p0.value=r"PATHWAY_TO_TARGET_OBJECT.gdb\Parcel_Results"        p1=arcpy.Parameter(            displayName="Geohazard Dataset",            name="WetlandDataset",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=False        )        p1.value=r"PATHWAY_TO_TARGET_OBJECT.gdb\Geohazard"####MAY NEED TO UPDATE        p2=arcpy.Parameter(            displayName="Default Buffer in Feet",            name="dBuff",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=False        )        p2.value="200"        p3=arcpy.Parameter(            displayName="layer(s) to exclude from buffers",            name="dBuff",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=True        )        p3.values=["Nonbedrock"]        params = [p0,p1,p2,p3]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        DIRinput=parameters[0].valueAsText        FCSgeohazLayers=[]        for root,b,layers in arcpy.da.Walk(parameters[1].valueAsText,"FeatureClass","Polygon"):            for i in layers:                temp=os.path.join(root,i)                FCSgeohazLayers.append(temp)        #arcpy.AddMessage(FCSgeohazLayers)        tStamp="{}-{}-{}".format(currentDate.year,currentDate.month,currentDate.day)        ct=0        ####MAY NEED TO UPDATE FILED 2 IN UC BELOW        with arcpy.da.UpdateCursor(DIRinput,['PIN','SHAPE@','pGeohazard','AdnlCaarNotes']) as uc:            for row in uc:                ct+=1                pinPOLY=row[1]                rNotes=""                for t in "o":                    try:                        if len(row[3])>0:                            rNotes=row[2]                        else:                            continue                    except:                        continue                #arcpy.AddMessage(ct)                dTrack={}                iResults = []                for i,lyr in enumerate(FCSgeohazLayers):                    iName=lyr.split("\\")[-1][0:-9].replace("_"," ")##eg 'Cat1 geohaz' cannot handle VAR's in suffix                    dTrack[i]=0                    buf=int(paramaters[2].valueAsText)####MAY NEED TO UPDATE BASED ON ACTUAL LAYER NAME                    for ii in parameters[3].values:                        tName=ii.split("\\")[-1][0:-9].replace("_"," ")                        if iName==tName:                            buf=0                        else:                            continue                    with arcpy.da.SearchCursor(lyr,['SHAPE@']) as scW:                        for rowsc in scW:                            TESTpoly = rowsc[0].buffer(buf)                            if dTrack[i]==0:                                if TESTpoly.disjoint(pinPOLY)==False:                                    iResults.append(iName)                                    dTrack[i]+=1                                else:                                    continue                            else:                                continue                row[2]=", ".join(iResults)                rNotes=rNotes[:-24]+"|Last updated {}".format(tStamp)                row[3]=rNotes #eg 'Last updated 2022-11-16'                uc.updateRow(row)        del i,tStamp,ct,row,uc,pinPOLY,dTrack,iResults,FCSgeohazLayers,buf,tName, rNotes, TESTpoly,rowsc,scW, temp        returnclass C3SFHA(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Critical Area Review: Wetland"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        p0=arcpy.Parameter(            displayName="Input Parcel Results Featureclass",            name="InputTPN",            datatype="GPString",            parameterType="Required",            direction="Input"        )        p0.value=r"PATHWAY_TO_TARGET_OBJECT.gdb\Parcel_Results"        p1=arcpy.Parameter(            displayName="Special Flood Hazard Area",            name="SFHADataset",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=False        )        p1.value=r"PATHWAY_TO_TARGET_OBJECT.gdb\SFHA"####MAY NEED TO BE UPDATED        params = [p0,p1]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        DIRinput=parameters[0].valueAsText        FCSsfhaLayers=[]        for root,b,layers in arcpy.da.Walk(parameters[1].valueAsText,"FeatureClass","Polygon"):            for i in layers:                temp=os.path.join(root,i)                FCSsfhaLayers.append(temp)        #arcpy.AddMessage(FCSsfhaLayers)        tStamp="{}-{}-{}".format(currentDate.year,currentDate.month,currentDate.day)        ct=0        ####MAY NEED TO UPDATE ITEM @ OF THE FOLLOWING UC        with arcpy.da.UpdateCursor(DIRinput,['PIN','SHAPE@','pSFHA','AdnlCaarNotes']) as uc:            for row in uc:                ct+=1                pinPOLY=row[1]                rNotes=""                for t in "o":                    try:                        if len(row[3])>0:                            rNotes=row[2]                        else:                            continue                    except:                        continue                #arcpy.AddMessage(ct)                dTrack={}                iResults = []                for i,lyr in enumerate(FCSsfhaLayers):                    #EXPECTING SINGLE DATASET, STILL CANNOT HANDLE VAR's                    dTrack[i]=0                    with arcpy.da.SearchCursor(lyr,['SHAPE@','FLD_AR_ID','DFIRM_ID','STATIC_BFE','FLD_ZONE']) as scW:                        for rowsc in scW:                            TESTpoly = rowsc[0]                            if dTrack[i]==0:                                if TESTpoly.disjoint(pinPOLY)==False:                                    iName = "Special Flood Hazard Area= {0} | DFIRM: {1} | BFE= {2} | Zone= {3}".format(rowsc[1],rowsc[2],rowsc[3],rowsc[4])                                    iResults.append(iName)                                    dTrack[i]+=1                                else:                                    continue                            else:                                continue                row[2]=", ".join(iResults)                rNotes=rNotes[:-24]+"|Last updated {}".format(tStamp)                row[3]=rNotes #eg'Last updated 2022-11-16'                uc.updateRow(row)        del i,tStamp,ct,row,uc,pinPOLY,dTrack,iResults,FCSwetlandLayers, rNotes, TESTpoly,rowsc,scW, temp        returnclass C4FWHCA(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Critical Area Review: Wetland"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        p0=arcpy.Parameter(            displayName="Input Parcel Results Featureclass",            name="InputTPN",            datatype="GPString",            parameterType="Required",            direction="Input"        )        p0.value=r"PATHWAY_TO_TARGET_OBJECT.gdb\Parcel_Results"        p1=arcpy.Parameter(            displayName="Special Flood Hazard Area",            name="fWHCADataset",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=False        )        p1.value=r"PATHWAY_TO_TARGET_OBJECT.gdb\FWHCA"##MAY NEED TO BE UPDATED        params = [p0,p1]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        DIRinput=parameters[0].valueAsText        FCSfwhcaLayers=[]        for root,b,layers in arcpy.da.Walk(parameters[1].valueAsText,"FeatureClass","Polygon"):            for i in layers:                temp=os.path.join(root,i)                FCSfwhcaLayers.append(temp)        #arcpy.AddMessage(FCSfwhcaLayers)        tStamp="{}-{}-{}".format(currentDate.year,currentDate.month,currentDate.day)        ct=0        ####MAY NEED TO UPDATE ITEM 2 & 4 OF THE FOLLOWING UC        with arcpy.da.UpdateCursor(DIRinput,['PIN','SHAPE@','pFWHCA','AdnlCaarNotes','pSMP']) as uc:            for row in uc:                ct+=1                pinPOLY=row[1]                rNotes=""                for t in "o":                    try:                        if len(row[3])>0:                            rNotes=row[2]                        else:                            continue                    except:                        continue                #arcpy.AddMessage(ct)                dTrack={}                iResults = []                for i,lyr in enumerate(FCSfwhcaLayers):                    iNameList=lyr.split("\\")                    iName=""                    var = False                    if len(iNameList[-1]) > 8:                        iNameList.remove(iNameList[-1])####SHOULD EITHER MAKE A BUFFERED LAYER FOR STREAM DATA OR HANDLE DATA WITH BUFFER IN THE NAME                        iName = " ".join(iNameList)                        var = True                    else:                        iNameList.remove(iNameList[-1])                        iName = " ".join(iNameList)                    dTrack[i]=0                    ####MAY NEED TO UPDATE WITH ACTUAL VAR FIELD NAME                    with arcpy.da.SearchCursor(lyr,['SHAPE@','TITLE']) as scW:                        for rowsc in scW:                            TESTpoly = rowsc[0]                            if dTrack[i]==0 and var==False:                                if TESTpoly.disjoint(pinPOLY)==False:                                    iResults.append(iName)                                    dTrack[i]+=1                                else:                                    continue                            elif dTrack[i]==0 and var==True:                                if TESTpoly.disjoint(pinPOLY)==False:                                    temp="{}: {}".format(iName,rowsc[1])                                    iResults.append(temp)                                    dTrack[i]+=1                                else:                                    continue                            elif dTrack[i]>=1 and var==True:                                if TESTpoly.disjoint(pinPOLY)==False:                                    temp="{}, {}".format(iResults[-1],rowsc[1])                                    iResults[-1]=temp                                    dTrack[i]+=1                                else:                                    continue                            else:                                continue                row[2]=", ".join(iResults)                rNotes=rNotes[:-24]+"|Last updated {}".format(tStamp)                row[3]=rNotes #eg'Last updated 2022-11-16'                uc.updateRow(row)        del i,tStamp,ct,row,uc,pinPOLY,dTrack,iResults,FCSfwhcaLayers, rNotes, TESTpoly,rowsc,scW, temp        returnclass C5Archy(object):    def __init__(self):        """Define the tool (tool name is the name of the class)."""        self.label = "Critical Area Review: Geological Hazards"        self.description = ""        self.canRunInBackground = False    def getParameterInfo(self):        """Define parameter definitions"""        p0=arcpy.Parameter(            displayName="Input Parcel Results Featureclass",            name="InputTPN",            datatype="GPString",            parameterType="Required",            direction="Input"        )        p0.value=r"PATHWAY_TO_TARGET_OBJECT.gdb\Parcel_Results"        p1=arcpy.Parameter(            displayName="Geohazard Dataset",            name="WetlandDataset",            datatype="GPString",            parameterType="Required",            direction="Input",            multiValue=False        )        p1.value=r"PATHWAY_TO_TARGET_OBJECT.gdb\Geohazard"####MAY NEED TO UPDATE        p2=arcpy.Parameter(            displayName="Archaeology Layer(s); requires Archaeology2021 feature layer to be open in current map",            name="caarArchaeology",            datatype="GPFeatureLayer",            parameterType="Required",            direction="Input",            multiValue=True        )        p2.values=["Archaeology\\Archaeological_Polys"]        params = [p0,p1,p2]        return params    def isLicensed(self):        """Set whether tool is licensed to execute."""        return True    def updateParameters(self, parameters):        """Modify the values and properties of parameters before internal        validation is performed.  This method is called whenever a parameter        has been changed."""        return    def updateMessages(self, parameters):        """Modify the messages created by internal validation for each tool        parameter.  This method is called after internal validation."""        return    def execute(self, parameters, messages):        """The source code of the tool."""        DIRinput=parameters[0].valueAsText        FCSarchyLayers=[]        for root,b,layers in arcpy.da.Walk(parameters[1].valueAsText,"FeatureClass","Polygon"):            for i in layers:                temp=os.path.join(root,i)                FCSarchyLayers.append(temp)        #arcpy.AddMessage(FCSarchyLayers)        tStamp="{}-{}-{}".format(currentDate.year,currentDate.month,currentDate.day)        ct=0        ####MAY NEED TO UPDATE FILED 2 IN UC BELOW        with arcpy.da.UpdateCursor(DIRinput,['PIN','SHAPE@','pArchy','AdnlCaarNotes']) as uc:            for row in uc:                ct+=1                pinPOLY=row[1]                rNotes=""                for t in "o":                    try:                        if len(row[3])>0:                            rNotes=row[2]                        else:                            continue                    except:                        continue                #arcpy.AddMessage(ct)                dTrack=""                for i,lyr in enumerate(FCSarchyLayers):                    with arcpy.da.SearchCursor(lyr,['SHAPE@']) as scW:                        for rowsc in scW:                            TESTpoly = rowsc[0]                            if TESTpoly.disjoint(pinPOLY)==False:                                if len(dTrack)==0:                                    dTrack=TESTpoly.intersect(pinPOLY,4)                                else:                                    temp=TESTpoly.intersect(pinPOLY,4)                                    temp2=dTrack                                    dTrack=temp.union(temp2)                            else:                                continue                ArchCoverage=round((dTrack.area/pinPOLY.area)*100,1)                iResults="Archaeological Buffer Overlap: {}%".format(str(ArchCoverage))                row[2]=iResults                rNotes=rNotes[:-24]+"|Last updated {}".format(tStamp)                row[3]=rNotes #eg 'Last updated 2022-11-16'                uc.updateRow(row)        del i,tStamp,ct,row,uc,pinPOLY,dTrack,iResults,FCSgeohazLayers,buf,tName, rNotes, TESTpoly,rowsc,scW, temp, temp2, ArchCoverage        return